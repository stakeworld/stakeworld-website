"use strict";(self.webpackChunkstakeworld=self.webpackChunkstakeworld||[]).push([[477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"RPC node setup","metadata":{"permalink":"/blog/RPC node setup","editUrl":"https://github.com/stakeworld/website/edit/master/blog/rpc-findings.md","source":"@site/blog/rpc-findings.md","title":"RPC node setup","description":"RPC node setup","date":"2022-12-09T10:09:44.000Z","formattedDate":"December 9, 2022","tags":[],"readingTime":2.215,"hasTruncateMarker":false,"authors":[{"name":"Stakeworld","title":"Maintainer of Stakeworld","url":"https://github.com/stakeworld","imageURL":"https://github.com/stakeworld.png","key":"stakeworld"}],"frontMatter":{"slug":"RPC node setup","title":"RPC node setup","authors":"stakeworld"}},"content":"## RPC node setup\\nStakeworld has recently setup public rpc nodes for polkadot and kusama, which will hopefully soon be included in the polkadot.js UI. Below some of the lessons learned in the process that might be interesting for others.\\n\\n## Secure Websocket\\nTo access the polkadot, kusama and parachains network we need some kind of entry in the network. This can be achieved by [setting up a node](docs/validate) which has sa RPC server and allowing access to that RPC server via a secure websocket (wss) port. The default setup already exposes a non secure ws socket on port 9944, but for a more usable situation we need a secure websocket which is accesible through a public port.\\n\\n### Archive node vs pruned node\\nA pruned node knows only the recent information about the network and not its full history. Most frequently done actions can be done with a pruned node, for example see account balances, make transfers, setup session keys, staking, etc. An archive node has the full history (database) of the network a can be queried in all kind of ways, give information about transfers since the network started, historical balances, advances queries about past events, etc. \\n\\nAn archive node requires a lot more diskspace (see [the snapshot page](docs/snapshots] for pruned and archive db sizes). Inclusion in the Polkadot.js UI requires an archive node. For an archive node you need the options `--state-pruning archive --blocks-pruning archive` in your startup settings. \\n\\n### Secure the RPC server\\nYou can choose **what** to expose with **how many** connections **from where** through your rpc server.\\n\\n*How many*: You can set your maximum connections throug `--ws-max-connections`, for example `--ws-max-connections 100`\\n\\n*From where*: by default localhost and the polkadot.js are allowed to access the RPC server, you can change this by setting `--rpc-cors`, to allow access from everywhere you need `--rpc-cors all`\\n\\n*What:*: you can limit the methods to use with `--rpc-methods`, an easy way to set this to a safe mode is `--rpc-methods Safe`\\n   \\n### Secure the ws port\\nThe ws port is a way to access the RPC server and preferably when exposed from the outside is secured with a SSL certificate.\\n\\nThe [polkadot wiki](https://wiki.polkadot.network/docs/maintain-wss) already covers a lot of information about this, especially in relation to setting it up in a nginx configuration. I\'ve focussed more on a apache2 but principles are the same. The main principle in converting the non secure ws port to a secure wss port is putting in behind a proxy. So from outside one see\'s the SSL enabled apache2/nginx/other proxy server, witch redirect the request to the internal node.\\n\\n#### Using apache2 for proxying\\n\\n### Stress testing your server"}]}')}}]);