"use strict";(self.webpackChunkstakeworld_io=self.webpackChunkstakeworld_io||[]).push([[420],{1396:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>p,frontMatter:()=>n,metadata:()=>l,toc:()=>d});var s=a(4848),i=a(8453);const n={id:"validate",title:"Setting up a validator node",description:"Setting up a validator node",slug:"/validate",sidebar_position:1,keywords:["validator setup","validator","validate","polkadot","kusama"]},r=void 0,l={id:"validate/validate",title:"Setting up a validator node",description:"Setting up a validator node",source:"@site/docs/validate/validate.mdx",sourceDirName:"validate",slug:"/validate",permalink:"/docs/validate",draft:!1,unlisted:!1,editUrl:"https://github.com/stakeworld/website/edit/master/docs/validate/validate.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"validate",title:"Setting up a validator node",description:"Setting up a validator node",slug:"/validate",sidebar_position:1,keywords:["validator setup","validator","validate","polkadot","kusama"]},sidebar:"tutorialSidebar",previous:{title:"Validate",permalink:"/docs/category/validate"},next:{title:"Monitoring a validator node",permalink:"/docs/monitor"}},o={},d=[{value:"Automatic install",id:"automatic-install",level:2},{value:"Manually setup a server",id:"manually-setup-a-server",level:2},{value:"Firewall",id:"firewall",level:2},{value:"Packages",id:"packages",level:2},{value:"Install polkadot",id:"install-polkadot",level:2},{value:"Systemctl service scripts",id:"systemctl-service-scripts",level:2},{value:"Database sync",id:"database-sync",level:2},{value:"Snapshot providers",id:"snapshot-providers",level:3}];function c(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"automatic-install",children:"Automatic install"}),"\n",(0,s.jsxs)(t.p,{children:["The following script will install a node with systemctl script, firewall and optionally restore a snapshot for a quickstart. If you want you can first review it on ",(0,s.jsx)(t.a,{href:"https://github.com/stakeworld/stakeworld-scripts/blob/master/node-install.sh",children:"github"}),", the script will ask some questions and create an installer script which you can review before executing."]}),"\n",(0,s.jsx)(t.p,{children:"The script is for ubuntu/debian flavoured servers."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"curl -o- -L https://raw.githubusercontent.com/stakeworld/stakeworld-scripts/master/node-install.sh | bash\n"})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"node-install",src:a(4978).A+"",width:"691",height:"490"})}),"\n",(0,s.jsx)(t.h2,{id:"manually-setup-a-server",children:"Manually setup a server"}),"\n",(0,s.jsx)(t.p,{children:"First you will need a working server setup. We advise an ubuntu 22.04 LTS on dedicated hardware."}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.a,{href:"https://wiki.polkadot.network/docs/maintain-guides-how-to-validate-kusama",children:"polkadot wiki"})," also has a lot of good information about seting up a validator node."]}),"\n",(0,s.jsx)(t.p,{children:"It is wise to start setting your hostname (preferably matched bij the reverse dns on your provider), copying your ssh keys to your server and disable plain password authentication."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"vi /etc/hostname\n"})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:"yourhostname.yourhostdomain"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"vi /etc/ssh/sshd_config\n"})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:"PasswordAuthentication no"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"systemctl restart sshd.service\n"})}),"\n",(0,s.jsx)(t.h2,{id:"firewall",children:"Firewall"}),"\n",(0,s.jsxs)(t.admonition,{type:"tip",children:[(0,s.jsx)(t.p,{children:"Polkadot needs some ports open in the firewall, especially the p2p port"}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"30333: p2p port"}),"\n",(0,s.jsx)(t.li,{children:"9933: HTTP RPC"}),"\n",(0,s.jsx)(t.li,{children:"9944: WS RPC"}),"\n",(0,s.jsx)(t.li,{children:"9615: prometheus port"}),"\n"]})]}),"\n",(0,s.jsx)(t.p,{children:"If you open a range of ports you can choose to run a second validator or change ports in your systemctl config."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"ufw allow openssh\nufw enable\nufw allow from any port 30300:30399 proto tcp\nufw allow 30300:30399/tcp\n"})}),"\n",(0,s.jsx)(t.h2,{id:"packages",children:"Packages"}),"\n",(0,s.jsx)(t.p,{children:"Optionally lock the kernel updates so you have to manually upgrade them (which requires a restart)"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"apt-mark hold linux-generic linux-headers-generic linux-image-generic\n"})}),"\n",(0,s.jsx)(t.h2,{id:"install-polkadot",children:"Install polkadot"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"# Import the security@parity.io GPG key\ngpg --recv-keys --keyserver hkps://keys.mailvelope.com 9D4B2B6EB8F97156D19669A9FF0812D491B96798\ngpg --export 9D4B2B6EB8F97156D19669A9FF0812D491B96798 > /usr/share/keyrings/parity.gpg\n# Add the Parity repository and update the package index\necho 'deb [signed-by=/usr/share/keyrings/parity.gpg] https://releases.parity.io/deb release main' > /etc/apt/sources.list.d/parity.list\napt update\n# Install the `parity-keyring` package - This will ensure the GPG key\n# used by APT remains up-to-date\napt install parity-keyring\n# Install polkadot\napt install polkadot\n"})}),"\n",(0,s.jsx)(t.h2,{id:"systemctl-service-scripts",children:"Systemctl service scripts"}),"\n",(0,s.jsxs)(t.p,{children:["By default there is a ",(0,s.jsx)(t.code,{children:"/usr/lib/systemd/system/polkadot.service"})," systemctl script which reads its defaults from ",(0,s.jsx)(t.code,{children:"/etc/default/polkadot"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"Below an adapted systemctl script. It gives the possibility for different ports, if you run more instances you need to adapt the ports and base directories alongside the \u201cDescription\u201d in the .service file."}),"\n",(0,s.jsxs)(t.p,{children:["You can download it here: ",(0,s.jsx)(t.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:a(6187).A+"",children:(0,s.jsx)(t.code,{children:"validator.service"})})," and copy it to ",(0,s.jsx)(t.code,{children:"/etc/systemd/system/"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"After you have installed your adapted service you can start and enable it by"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"systemctl daemon-reload\nsystemctl start validator.service\nsystemctl enable validator.service\njournalctl -u validator.service -f\n"})}),"\n",(0,s.jsx)(t.h2,{id:"database-sync",children:"Database sync"}),"\n",(0,s.jsx)(t.p,{children:"If you fire up a fresh polkadot it starts to sync from scratch, which will take a while."}),"\n",(0,s.jsx)(t.p,{children:"Using an up to date database you can speed up the process. Best is to shortly start the relevant polkadot binary, so the file structure gets created, then stop it and execute the code below. After this you can start the binary and it will only need a short period to sync and start validating."}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsx)(t.p,{children:"There are different size databases, a \u201cpruned\u201d database is sufficient for a validator node."})}),"\n",(0,s.jsx)(t.h3,{id:"snapshot-providers",children:"Snapshot providers"}),"\n",(0,s.jsxs)(t.p,{children:["Stakeworld hosts a pruned snapshot in paritydb format for quick deployment, you can find details ",(0,s.jsx)(t.a,{href:"./snapshot",children:"here"}),". There are also other providers like ",(0,s.jsx)(t.a,{href:"https://polkashots.io/",children:"polkashots.io"})," and ",(0,s.jsx)(t.a,{href:"https://polkachu.com/snapshots",children:"polkachu.com"}),"."]})]})}function p(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},6187:(e,t,a)=>{a.d(t,{A:()=>s});const s=a.p+"assets/files/validator-7075e5f09f0b0d562de12c2fe764e6cd.service"},4978:(e,t,a)=>{a.d(t,{A:()=>s});const s=a.p+"assets/images/node-install-4a2a5d32b680793d969d9bb3ff475806.gif"},8453:(e,t,a)=>{a.d(t,{R:()=>r,x:()=>l});var s=a(6540);const i={},n=s.createContext(i);function r(e){const t=s.useContext(n);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(n.Provider,{value:t},e.children)}}}]);